import json
import requests
from web3 import Web3
import pandas as pd

class DeFiToolkit:
    def __init__(self, infura_url: str, uniswap_v2_router_address: str, uniswap_v2_router_abi: dict):
        self.web3 = Web3(Web3.HTTPProvider(infura_url))
        if not self.web3.isConnected():
            raise ConnectionError("Unable to connect to the Ethereum network.")
        
        self.router_address = Web3.toChecksumAddress(uniswap_v2_router_address)
        self.router_contract = self.web3.eth.contract(address=self.router_address, abi=uniswap_v2_router_abi)

    def swap_tokens(self, from_token: str, to_token: str, amount_in: float, slippage: float, private_key: str) -> str:
        account = self.web3.eth.account.privateKeyToAccount(private_key)
        from_token = Web3.toChecksumAddress(from_token)
        to_token = Web3.toChecksumAddress(to_token)

        amount_in_wei = self.web3.toWei(amount_in, 'ether')
        path = [from_token, to_token]

        nonce = self.web3.eth.getTransactionCount(account.address)
        transaction = self.router_contract.functions.swapExactTokensForTokens(
            amount_in_wei,
            0,  # amountOutMin (set to 0 for simplicity; in production, calculate based on slippage)
            path,
            account.address,
            self.web3.eth.getBlock('latest')['timestamp'] + 1000
        ).buildTransaction({
            'chainId': 1,
            'gas': 200000,
            'gasPrice': self.web3.toWei('20', 'gwei'),
            'nonce': nonce
        })
        
        signed_tx = self.web3.eth.account.signTransaction(transaction, private_key)
        tx_hash = self.web3.eth.sendRawTransaction(signed_tx.rawTransaction)
        
        return self.web3.toHex(tx_hash)

    def get_liquidity_pool_data(self, token0: str, token1: str) -> dict:
        token0 = Web3.toChecksumAddress(token0)
        token1 = Web3.toChecksumAddress(token1)
        
        pair_address = self.get_pair_address(token0, token1)
        pair_contract = self.web3.eth.contract(address=pair_address, abi=pair_abi)
        
        reserves = pair_contract.functions.getReserves().call()
        total_supply = pair_contract.functions.totalSupply().call()
        
        return {
            'reserves': reserves,
            'total_supply': self.web3.fromWei(total_supply, 'ether')
        }

    def get_pair_address(self, token0: str, token1: str) -> str:
        factory_address = Web3.toChecksumAddress('0x5C69bEe701ef814a2E6a9a4Dcb1C2E8e8C6D9e80')  # Uniswap V2 Factory
        factory_contract = self.web3.eth.contract(address=factory_address, abi=factory_abi)
        
        pair_address = factory_contract.functions.getPair(token0, token1).call()
        return pair_address

    def calculate_yield(self, staked_amount: float, annual_yield_percentage: float) -> float:
        return staked_amount * (annual_yield_percentage / 100)

# Example Usage
if __name__ == "__main__":
    INFURA_URL = 'https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID'
    UNISWAP_V2_ROUTER_ADDRESS = '0x5C69bEe701ef814a2E6a9a4Dcb1C2E8e8C6D9e80'
    UNISWAP_V2_ROUTER_ABI = json.loads('[...]')  # Replace with actual Uniswap V2 Router ABI
    FACTORY_ABI = json.loads('[...]')  # Replace with actual Uniswap V2 Factory ABI
    PAIR_ABI = json.loads('[...]')  # Replace with actual Uniswap V2 Pair ABI

    defi_toolkit = DeFiToolkit(INFURA_URL, UNISWAP_V2_ROUTER_ADDRESS, UNISWAP_V2_ROUTER_ABI)

    # Swap Tokens
    from_token = '0xTokenAddress1'
    to_token = '0xTokenAddress2'
    amount_in = 0.1  # Amount in ETH
    slippage = 0.5  # Slippage percentage
    private_key = 'YOUR_PRIVATE_KEY'
    tx_hash = defi_toolkit.swap_tokens(from_token, to_token, amount_in, slippage, private_key)
    print("Swap Transaction Hash:", tx_hash)

    # Get Liquidity Pool Data
    token0 = '0xTokenAddress1'
    token1 = '0xTokenAddress2'
    pool_data = defi_toolkit.get_liquidity_pool_data(token0, token1)
    print("Liquidity Pool Data:", pool_data)

    # Calculate Yield
    staked_amount = 1.0  # Amount in ETH
    annual_yield_percentage = 5.0  # Yield percentage
    yield_amount = defi_toolkit.calculate_yield(staked_amount, annual_yield_percentage)
    print("Calculated Yield:", yield_amount)
